<% layout('layouts/boilerplate') %>

    <div class="row">
        <h1 class="col-6 offset-3 text-center mb-4">Sign Up for FarAway</h1>
        <div class="col-12 col-md-6 offset-md-3">
            <form action="/signup" method="post" class="needs-validation" novalidate autocomplete="on">

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <input type="text" id="username" class="form-control" name="username" required minlength="3"
                        maxlength="15" pattern="^[a-zA-Z0-9_]{3,15}$" autocomplete="username">
                    <div class="invalid-feedback">
                        Only letters, numbers, and underscores allowed (3–15 chars).
                    </div>
                    <div class="valid-feedback">
                        Looks Good!
                    </div>
                    <p id="username-msg" class="small mt-1"></p>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" id="email" class="form-control" name="email" required autocomplete="email">
                    <div class="invalid-feedback">
                        Please provide a valid Email address.
                    </div>
                    <div class="valid-feedback">
                        Looks Good!
                    </div>
                    <p id="email-msg" class="small mt-1"></p>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" id="password" class="form-control" name="password" required minlength="6"
                        autocomplete="new-password">
                    <div class="invalid-feedback">
                        Please provide a valid Password (minimum 6 characters).
                    </div>
                    <div class="valid-feedback">
                        Looks Good!
                    </div>
                </div>
                <div class="d-grid">
                    <button class="btn btn-primary btn-lg fw-bold" type="submit">Sign Up</button>
                </div>
            </form>
            <div class="mt-3 text-center">
                <p>Already have an account? <a href="/login" class="text-decoration-none">Login here</a></p>
            </div>
        </div>
    </div>

    <script>
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                var forms = document.getElementsByClassName('needs-validation');
                Array.prototype.forEach.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();

        const usernameInput = document.getElementById('username');
        const emailInput = document.getElementById('email');
        const usernameMsg = document.getElementById('username-msg');
        const emailMsg = document.getElementById('email-msg');

        usernameInput.addEventListener('blur', async () => {
            const username = usernameInput.value.trim();
            const usernameRegex = /^[a-zA-Z0-9_]{3,15}$/;
            if (!usernameRegex.test(username)) {
                usernameMsg.textContent = "Only letters, numbers, and underscores allowed (3–15 chars)";
                usernameMsg.className = "text-danger small mt-1";
                return;
            }
            try {
                const res = await fetch(`/check-username?username=${encodeURIComponent(username)}`);
                const data = await res.json();
                if (data.available) {
                    usernameMsg.textContent = "Username is available";
                    usernameMsg.className = "text-success small mt-1";
                } else {
                    usernameMsg.textContent = data.reason === 'Taken' ? "Username already taken" : data.reason;
                    usernameMsg.className = "text-danger small mt-1";
                }
            } catch (err) {
                usernameMsg.textContent = "Error checking username";
                usernameMsg.className = "text-danger small mt-1";
            }
        });

        emailInput.addEventListener('blur', async () => {
            const email = emailInput.value.trim();
            if (!email.includes("@")) return;
            try {
                const res = await fetch(`/check-email?email=${encodeURIComponent(email)}`);
                const data = await res.json();
                if (data.available) {
                    emailMsg.textContent = "Email is available";
                    emailMsg.className = "text-success small mt-1";
                } else {
                    emailMsg.textContent = data.reason === 'Taken' ? "Email already exists" : data.reason;
                    emailMsg.className = "text-danger small mt-1";
                }
            } catch (err) {
                emailMsg.textContent = "Error checking email";
                emailMsg.className = "text-danger small mt-1";
            }
        });
    </script>